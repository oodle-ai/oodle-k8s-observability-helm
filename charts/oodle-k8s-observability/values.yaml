# Configuration for kube-state-metrics chart
kube-state-metrics:
  enabled: true
  
  # Override labels to make this instance uniquely identifiable
  customLabels:
    app: oodle-kube-state-metrics

# Configuration for prometheus-node-exporter chart  
prometheus-node-exporter:
  enabled: true
  
  # Use custom port to avoid conflicts with other node exporters
  service:
    port: 9301
    targetPort: 9301
    
  # Override labels to make this instance uniquely identifiable
  commonLabels:
    app: oodle-node-exporter

# Configuration for Metrics
vmagent:
  enabled: true

  mode: statefulSet

  # Number of vmagent replicas for sharding
  replicaCount: 2

  # StatefulSet configuration for sharding
  statefulSet:
    clusterMode: true
    replicationFactor: 1
    spec:
      podManagementPolicy: "Parallel"

  # Persistent volume for each replica to store scrape queue
  persistentVolume:
    enabled: true
    size: 20Gi
    storageClass: ""

  # Resource limits for each replica
  resources:
    limits:
      cpu: 1000m
      memory: 4Gi
    requests:
      cpu: 100m
      memory: 512Mi

  # Pod disruption budget to ensure availability during updates
  podDisruptionBudget:
    enabled: true
    minAvailable: 1

  # Add prometheus annotations for self-discovery
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8429"
    prometheus.io/path: "/metrics"

  # Remote write configuration for sending metrics to Oodle
  remoteWrite:
    - url: "" # Oodle Prometheus Metrics Write Endpoint
      headers: "X-API-KEY: <>" # Oodle API Key

  extraArgs:
    promscrape.suppressDuplicateScrapeTargetErrors: "true"
    remoteWrite.forcePromProto: "true"

  # -- Extra scrape configs that will be appended to `config`
  extraScrapeConfigs: [ ]

  # Scrape configuration for collecting metrics
  config:
    global:
      scrape_interval: 60s
      scrape_timeout: 1m
      external_labels:
        cluster: "" # Kubernetes Cluster Name

    scrape_configs:
      # Note: vmagent scrapes itself via prometheus.io/scrape annotation
      # discovered by kubernetes-pods job below

      # Scrape Kubernetes API servers
      - job_name: kubernetes-apiservers
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      # Scrape Kubelet metrics from each node using direct mode
      - job_name: kubernetes-nodes
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        metrics_path: /metrics
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - source_labels: [__address__]
            regex: ([^:]+):(.*)
            target_label: __address__
            replacement: $1:10250
          # Set instance to node name (hostname) instead of IP
          - source_labels: [__meta_kubernetes_node_name]
            target_label: instance
            replacement: $1
          - source_labels: [ __meta_kubernetes_node_name ]
            target_label: node
            replacement: $1
        honor_timestamps: false

      # Scrape cAdvisor metrics (container metrics) using direct mode
      - job_name: kubernetes-nodes-cadvisor
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        metrics_path: /metrics/cadvisor
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - source_labels: [__address__]
            regex: ([^:]+):(.*)
            target_label: __address__
            replacement: $1:10250
          # Set instance to node name (hostname) instead of IP
          - source_labels: [__meta_kubernetes_node_name]
            target_label: instance
            replacement: $1
        honor_timestamps: false

      # Scrape kube-state-metrics (only the one deployed by this chart)
      - job_name: kube-state-metrics
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          # Filter by custom label to ensure we only scrape our deployed instance
          - source_labels: [__meta_kubernetes_service_label_app]
            action: keep
            regex: "oodle-kube-state-metrics"
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: ".*kube-state-metrics.*"
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: http

      # Scrape node-exporter (only the one deployed by this chart)
      - job_name: node-exporter
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          # Filter by custom label to ensure we only scrape our deployed instance
          - source_labels: [__meta_kubernetes_service_label_app]
            action: keep
            regex: "oodle-node-exporter"
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: ".*node-exporter.*"
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
          - source_labels: [__meta_kubernetes_pod_node_name]
            target_label: instance
            replacement: $1

      # Scrape pods with prometheus.io/scrape: true annotation
      - job_name: kubernetes-pods
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - action: drop
            source_labels: [__meta_kubernetes_pod_container_init]
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels:
              [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_container_name]
            target_label: container
          - source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node
          - source_labels: [ __meta_kubernetes_pod_node_name ]
            target_label: instance
            replacement: $1

      # Scrape beyla with hardcoded oodle_metrics path
      - job_name: oodle-beyla
        kubernetes_sd_configs:
          - role: pod
        metrics_path: /oodle_metrics
        relabel_configs:
          - action: drop
            source_labels: [__meta_kubernetes_pod_container_init]
            regex: true
          # Only scrape beyla pods
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
            action: keep
            regex: ".*beyla.*"
          # Use prometheus port annotation if present, otherwise default
          - source_labels:
              [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_container_name]
            target_label: container
          - source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node
          - source_labels: [ __meta_kubernetes_pod_node_name ]
            target_label: instance
            replacement: $1
          # Set cardinality limit for beyla oodle metrics
          - target_label: __series_limit__
            replacement: "1000000"

# Configuration for oodle-k8s-auto-instrumentation chart (using alias: auto-instrumentation)
auto-instrumentation:
  enabled: true
  beyla:
    env:
      BEYLA_KUBE_CLUSTER_NAME: "" # Kubernetes Cluster Name

# Configuration for Vector Agent
vector-agent:
  enabled: true
  role: Agent

  env:
    - name: CLUSTER_NAME
      value: "" # Kubernetes Cluster Name

  tolerations:
    - effect: NoSchedule
      operator: Exists

  # Additional filters applied to select which pods to scrape
  # Example: "app.kubernetes.io/name!=kube-state-metrics,app.kubernetes.io/name!=node-exporter"
  label_selectors: ""
  # Additional filters applied to select which namespaces to scrape
  # Example: "kubernetes.io/metadata.name!=kube-system,kubernetes.io/metadata.name!=kube-public"
  namespace_label_selectors: ""

  customConfig:
    data_dir: /vector-data-dir
    api:
      enabled: true
      address: 127.0.0.1:8686
      playground: false

    sources:
      kubernetes_logs:
        type: kubernetes_logs
        max_line_bytes: 1048576 # 1 Mib
        extra_label_selector: "{{ .Values.label_selectors }}"
        extra_namespace_label_selector: "{{ .Values.namespace_label_selectors }}"

    transforms:
      drop_old_logs:
        type: filter
        inputs:
          - kubernetes_logs
        condition: |
          to_unix_timestamp(now()) - 24*3600 < to_unix_timestamp(timestamp!(.timestamp))

      add_cluster_name:
        type: remap
        inputs:
          - drop_old_logs
        source: |
          if !exists(.cluster) {
            .cluster = "${CLUSTER_NAME}"
          }
          .

    sinks:
      vector:
        type: vector
        inputs:
          - add_cluster_name
        address: "{{ .Release.Name }}-vector-aggregator:6000"

# Configuration for Vector Aggregator  
vector-aggregator:
  enabled: true
  env:
    - name: OODLE_INSTANCE
      value: "" # Oodle Instance
    - name: OODLE_API_KEY
      value: "" # Oodle API Key
    - name: OODLE_LOGS_HOST
      value: "" # Oodle Logs Host

  podLabels:
    # Make sure `vector-agent` collects logs from `vector-aggregator`.
    "vector.dev/exclude": "false"

  customConfig:
    data_dir: /vector-data-dir
    api:
      enabled: true
      address: 127.0.0.1:8686
      playground: false

    sources:
      vector:
        address: 0.0.0.0:6000
        type: vector
    
    sinks:
      oodle:
        type: http
        inputs:
          - vector
        uri: "${OODLE_LOGS_HOST}/ingest/v1/logs"
        encoding:
          codec: json
        compression: gzip
        headers:
          X-OODLE-INSTANCE: "${OODLE_INSTANCE}"
          X-API-KEY: "${OODLE_API_KEY}"
          X-OODLE-LOG-SOURCE: "vector"
        request:
          retry_attempts: 3
          timeout_secs: 60

# Configuration for Kubernetes Event Exporter
event-exporter:
  enabled: true

  image:
    registry: "public.ecr.aws/oodle-ai"
    repository: kubernetes-event-exporter
    tag: 1.7.0-debian-12-r46

  extraEnvVars:
    - name: CLUSTER_NAME
      value: "" # Kubernetes Cluster Name
    - name: OODLE_INSTANCE
      value: "" # Oodle Instance
    - name: OODLE_API_KEY
      value: "" # Oodle API Key
    - name: OODLE_LOGS_HOST
      value: "" # Oodle Logs Host

  config:
    clusterName: "${CLUSTER_NAME}"
    logLevel: info
    logFormat: pretty
    route:
      routes:
        - match:
            - receiver: "oodle"

    receivers:
      - name: "oodle"
        webhook:
          endpoint: "${OODLE_LOGS_HOST}/ingest/v1/logs"
          headers:
            X-OODLE-INSTANCE: "${OODLE_INSTANCE}"
            X-API-KEY: "${OODLE_API_KEY}"
            X-OODLE-LOG-SOURCE: "event-exporter"
